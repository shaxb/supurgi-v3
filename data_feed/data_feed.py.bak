"""
Data Feed Module

This module is responsible for fetching and preprocessing market data.
It is used by brokers to get the latest market data for strategy execution.
"""

import os
import pandas as pd
import numpy as np
import datetime
from typing import Dict, Any, Union

class DataFeed:
    """
    Fetches and preprocesses market data for strategies and brokers.
    """    def __init__(self, config_manager, logger):
        """
        Initialize the data feed with configuration and logger.
        
        Args:
            config_manager: An instance of ConfigManager
            logger: An instance of Logger
        """
        self.config_manager = config_manager
        self.logger = logger
        
    def fetch_historical_data(self, symbol: str, timeframe: str, bars_count: int = None,
                           start_date: datetime.datetime = None, 
                           end_date: datetime.datetime = None) -> pd.DataFrame:
        """
        Fetch historical data for a symbol and timeframe.
        
        Args:
            symbol: The trading symbol (e.g., 'EURUSDm')
            timeframe: The timeframe (e.g., 'M15', 'H1')
            bars_count: Number of bars to fetch (optional if date range is provided)
            start_date: Start date for historical data (optional)
            end_date: End date for historical data (optional)
            
        Returns:
            Historical market data as a DataFrame
        """
        if bars_count:
            self.logger.log_info(f"Fetching {bars_count} bars of {timeframe} data for {symbol}")
        else:
            self.logger.log_info(f"Fetching {timeframe} data for {symbol} from {start_date} to {end_date}")
        
        # Check if we should use cached data
        backtest_config = self.config_manager.controller_config.get('backtest', {})
        cache_data = backtest_config.get('cache_data', True)
        data_directory = backtest_config.get('data_directory', 'data/historical')
        
        # If caching is enabled, check for cached data first
        if cache_data:
            # Create the directory if it doesn't exist
            if not os.path.exists(data_directory):
                os.makedirs(data_directory)
                
            cache_file = os.path.join(data_directory, f"{symbol}_{timeframe}.csv")
            if os.path.exists(cache_file):
                try:
                    self.logger.log_info(f"Loading cached data from {cache_file}")
                    data = pd.read_csv(cache_file, parse_dates=['time'])
                    
                    # Return the requested number of bars
                    if len(data) >= bars_count:
                        return data.tail(bars_count)
                except Exception as e:
                    self.logger.log_error(f"Error loading cached data: {str(e)}")
        
        # If we reach here, we need to fetch data from the broker/API
        # For this skeleton implementation, we'll generate synthetic data
        self.logger.log_info(f"Generating synthetic data for {symbol}")
        data = self._generate_synthetic_data(symbol, timeframe, bars_count)
        
        # Cache the data if caching is enabled
        if cache_data and data is not None:
            try:
                cache_file = os.path.join(data_directory, f"{symbol}_{timeframe}.csv")
                data.to_csv(cache_file, index=False)
                self.logger.log_info(f"Cached data to {cache_file}")
            except Exception as e:
                self.logger.log_error(f"Error caching data: {str(e)}")
        
        return data
        
    def fetch_current_price(self, symbol: str) -> Dict[str, float]:
        """
        Fetch the current price for a symbol.
        
        Args:
            symbol: The trading symbol (e.g., 'EURUSDm')
            
        Returns:
            Current bid and ask prices
        """
        # For the skeleton implementation, we'll generate a synthetic price
        self.logger.log_debug(f"Fetching current price for {symbol}")
        
        # Get symbol metadata for realistic price ranges
        symbol_meta = self.config_manager.get_symbol_meta(symbol)
        
        # Default values if metadata is not available
        base_price = 1.0
        spread_pips = 2.0
        pip_size = 0.0001
        
        if symbol_meta:
            # Use the last known price as base, or a default if not available
            base_price = 1.0  # This would be replaced with stored recent price
            pip_size = symbol_meta.get('pip_size', 0.0001)
            
            # Calculate spread based on typical market conditions
            # In a real implementation, this would be fetched from the broker
            spread_pips = 2.0  # Default 2 pip spread
        
        # Add small random variation to price
        price_variation = np.random.normal(0, pip_size * 5)
        current_price = base_price + price_variation
        
        # Calculate bid/ask with spread
        spread_amount = spread_pips * pip_size
        bid_price = current_price - spread_amount / 2
        ask_price = current_price + spread_amount / 2
        
        return {
            'bid': bid_price,
            'ask': ask_price
        }
        
    def preprocess_data(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Preprocess market data before use.
        
        Args:
            data: Raw market data
            
        Returns:
            Preprocessed market data
        """
        if data is None or data.empty:
            return pd.DataFrame()
        
        # Ensure the data has the required columns
        required_columns = ['time', 'open', 'high', 'low', 'close', 'volume']
        for col in required_columns:
            if col not in data.columns:
                self.logger.log_error(f"Required column {col} missing from data")
                return pd.DataFrame()
        
        # Make a copy to avoid modifying the original data
        df = data.copy()
        
        # Sort by time
        df = df.sort_values('time')
        
        # Reset index
        df = df.reset_index(drop=True)
        
        return df
    
    def _generate_synthetic_data(self, symbol: str, timeframe: str, bars_count: int) -> pd.DataFrame:
        """
        Generate synthetic data for demonstration purposes.
        
        Args:
            symbol: The trading symbol
            timeframe: The timeframe
            bars_count: Number of bars to generate
            
        Returns:
            Synthetic data as a DataFrame
        """
        # Get symbol metadata for realistic price ranges
        symbol_meta = self.config_manager.get_symbol_meta(symbol)
        
        # Default values
        start_price = 1.0
        volatility = 0.0005
        
        # Use metadata if available
        if symbol_meta:
            if symbol == "EURUSDm":
                start_price = 1.1000
            elif symbol == "USDJPY":
                start_price = 145.00
                volatility = 0.05
        
        # Generate time series based on the timeframe
        time_delta = self._get_timedelta_from_timeframe(timeframe)
        end_time = datetime.datetime.now()
        start_time = end_time - time_delta * bars_count
        times = [start_time + time_delta * i for i in range(bars_count)]
        
        # Generate price data using random walk
        prices = [start_price]
        for i in range(1, bars_count):
            # Random walk with drift
            price_change = np.random.normal(0, volatility)
            prices.append(prices[-1] + price_change)
        
        # Generate OHLC data
        data = []
        for i in range(bars_count):
            # Generate open, high, low, close around the price
            base_price = prices[i]
            open_price = base_price
            high_price = base_price + abs(np.random.normal(0, volatility))
            low_price = base_price - abs(np.random.normal(0, volatility))
            close_price = base_price + np.random.normal(0, volatility / 2)
            
            # Ensure high >= open >= close >= low
            high_price = max(high_price, open_price, close_price)
            low_price = min(low_price, open_price, close_price)
            
            # Generate volume
            volume = abs(np.random.normal(1000, 300))
            
            data.append({
                'time': times[i],
                'open': open_price,
                'high': high_price,
                'low': low_price,
                'close': close_price,
                'volume': volume
            })
        
        return pd.DataFrame(data)
    
    def _get_timedelta_from_timeframe(self, timeframe: str) -> datetime.timedelta:
        """
        Convert timeframe string to a timedelta object.
        
        Args:
            timeframe: The timeframe string (e.g., 'M1', 'H1', 'D1')
            
        Returns:
            Corresponding timedelta
        """
        # Parse timeframe string
        if timeframe.startswith('M'):
            return datetime.timedelta(minutes=int(timeframe[1:]))
        elif timeframe.startswith('H'):
            return datetime.timedelta(hours=int(timeframe[1:]))
        elif timeframe.startswith('D'):
            return datetime.timedelta(days=int(timeframe[1:]))
        else:
            # Default to 1 minute
            self.logger.log_warning(f"Unknown timeframe format: {timeframe}, defaulting to M1")
            return datetime.timedelta(minutes=1)
